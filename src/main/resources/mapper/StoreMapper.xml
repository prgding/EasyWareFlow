<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="me.ding.easywareflow.mapper.StoreMapper">

    <!-- List<Store> findAllStore()-->
    <select id="findAllStore" resultType="Store">
        select *
        from store
    </select>

    <!-- int selectStoreCount(Store store);-->
    <select id="selectStoreCount" resultType="integer">
        select count(*) from store
        <where>
            <if test="storeName != null and storeName != ''">
                and store_name like concat('%', #{storeName}, '%')
            </if>
            <if test="storeAddress != null and storeAddress != ''">
                and store_address like concat('%', #{storeAddress}, '%')
            </if>
            <if test="contact != null and contact != ''">
                and contact like concat('%', #{contact}, '%')
            </if>
            <if test="phone != null and phone != ''">
                and phone like concat('%', #{phone}, '%')
            </if>
        </where>
    </select>

    <!-- List<Store> selectStorePage(@Param("page") Page page, @Param("store") Store store);-->
    <select id="selectStorePage" resultType="Store">
        select * from store
        <where>
            <if test="store.storeName != null and store.storeName != ''">
                and store_name like concat('%', #{store.storeName}, '%')
            </if>
            <if test="store.storeAddress != null and store.storeAddress != ''">
                and store_address like concat('%', #{store.storeAddress}, '%')
            </if>
            <if test="store.contact != null and store.contact != ''">
                and contact like concat('%', #{store.contact}, '%')
            </if>
            <if test="store.phone != null and store.phone != ''">
                and phone like concat('%', #{store.phone}, '%')
            </if>
        </where>
        limit #{page.limitIndex}, #{page.pageSize}
    </select>

    <!-- int insertStore(Store store)-->
    <insert id="insertStore">
        insert into store
        values (null, #{storeName}, #{storeNum},
                #{storeAddress}, #{contact}, #{phone})
    </insert>

    <!-- int updateStoreById(Store store)-->
    <update id="updateStoreById">
        update store
        set store_name    = #{storeName},
            store_address = #{storeAddress},
            contact       = #{contact},
            phone         = #{phone}
        where store_id = #{storeId}
    </update>

    <!-- int deleteStoreById(Integer storeId)-->
    <delete id="deleteStoreById">
        delete
        from store
        where store_id = #{storeId}
    </delete>

</mapper>
